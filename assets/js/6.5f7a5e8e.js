(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{203:function(t,s,e){t.exports=e.p+"assets/img/graph_raw.1e894d6e.png"},204:function(t,s,e){t.exports=e.p+"assets/img/graph_topo.e148e0f2.png"},205:function(t,s,e){t.exports=e.p+"assets/img/graph_consolidated.cda52d4c.png"},235:function(t,s,e){"use strict";e.r(s);var a=e(3),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("A notebook of this guide can be found at "),a("a",{attrs:{href:"https://colab.research.google.com/github/cityseer/cityseer/blob/master/demo_notebooks/graph_cleaning.ipynb",target:"_blank",rel:"noopener noreferrer"}},[t._v("google colaboratory"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("h1",{attrs:{id:"graph-cleaning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graph-cleaning"}},[t._v("#")]),t._v(" Graph cleaning")]),t._v(" "),a("p",[t._v("Good sources of street network data, such as the Ordnance Survey's "),a("a",{attrs:{href:"https://www.ordnancesurvey.co.uk/business-and-government/products/os-open-roads.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("OS Open Roads"),a("OutboundLink")],1),t._v(", typically have two distinguishing characteristics:")]),t._v(" "),a("ul",[a("li",[t._v("The network has been simplified to its essential structure: i.e. unnecessarily complex representations of intersections; on-ramps; split roadways; etc. have been reduced to a simpler representation concurring more readily with the core topological structure of street networks. This is in contrast to network representations focusing on completeness (e.g. for route way-finding, see "),a("a",{attrs:{href:"https://www.ordnancesurvey.co.uk/business-and-government/help-and-support/products/itn-layer.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("OS ITN Layer"),a("OutboundLink")],1),t._v("): these introduce unnecessary complexity serving to hinder rather than help shortest-path algorithms.")]),t._v(" "),a("li",[t._v("The topology of the network is kept distinct from the geometry of the streets. Oftentimes, as can be seen with "),a("a",{attrs:{href:"https://www.openstreetmap.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Open Street Map"),a("OutboundLink")],1),t._v(", additional nodes are added to streets for the purpose of representing geometric twists and turns along a roadway. These additional nodes cause topological distortions that impact network centrality measures.")])]),t._v(" "),a("p",[t._v("When a high-quality source is available, it may be best not to attempt additional cleanup unless there is a particular reason to do so. On the other-hand, many indispensable sources of network information, particularly Open Street Map data, can be messy for the purposes of network analysis. This section describes how such sources can be cleaned and prepared for subsequent analysis.")]),t._v(" "),a("h2",{attrs:{id:"downloading-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#downloading-data"}},[t._v("#")]),t._v(" Downloading data")]),t._v(" "),a("p",[t._v("This example will make use of OSM data downloaded from the "),a("a",{attrs:{href:"https://wiki.openstreetmap.org/wiki/API",target:"_blank",rel:"noopener noreferrer"}},[t._v("OSM API"),a("OutboundLink")],1),t._v(". To keep things interesting, let's pick Travalgar Square in London, which will be buffered and cleaned for a "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[a("mjx-math",{staticClass:" MJX-TEX"},[a("mjx-mn",{staticClass:"mjx-n"},[a("mjx-c",{attrs:{c:"1"}})],1),a("mjx-mo",{staticClass:"mjx-n"},[a("mjx-c",{attrs:{c:","}})],1),a("mjx-mn",{staticClass:"mjx-n",attrs:{space:"2"}},[a("mjx-c",{attrs:{c:"6"}}),a("mjx-c",{attrs:{c:"0"}}),a("mjx-c",{attrs:{c:"0"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"m"}})],1)],1)],1),t._v(" radius.")],1),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),a("p",[t._v("The following example makes use of two excellent python modules: "),a("a",{attrs:{href:"https://github.com/Turbo87/utm",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("utm")]),a("OutboundLink")],1),t._v(" for converting between "),a("code",[t._v("WGS")]),t._v(" geographic coordinates and "),a("code",[t._v("UTM")]),t._v(" projected coordinates; and "),a("a",{attrs:{href:"https://github.com/Toblerity/Shapely",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("shapely")]),a("OutboundLink")],1),t._v(" for generating and manipulating geometry.")])]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" requests\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" utm\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" shapely "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" geometry\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# let's download data within a 1,600m buffer around Travalgar Square in London:")]),t._v("\nlat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lng "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("51.507999")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.127970")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cast the WGS coordinates to UTM prior to buffering")]),t._v("\neasting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" northing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" utm_zone_number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" utm_zone_letter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" utm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("from_latlon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lng"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create a point, and then buffer")]),t._v("\npt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" geometry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("easting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" northing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngeom_utm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("buffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1600")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cast the geometry back to WGS for the OSM query")]),t._v("\ngeom_wgs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("utm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_latlon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" utm_zone_number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" utm_zone_letter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" geom_utm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exterior"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("coords"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# format for OSM query")]),t._v("\ngeom_osm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("lat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("lng"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" lat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lng "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" geom_wgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# osm query")]),t._v("\ntimeout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nfilters "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'["area"!~"yes"]\'')]),t._v(" \\\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'["highway"!~"path|footway|motor|proposed|construction|abandoned|platform|raceway|service"]\'')]),t._v(" \\\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'["foot"!~"no"]\'')]),t._v(" \\\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'["service"!~"private"]\'')]),t._v(" \\\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'["access"!~"private"]\'')]),t._v("\nquery "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'[out:json][timeout:")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('];(way["highway"]')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("filters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('(poly:"')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("geom_osm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"); >;);out skel qt;'")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    response "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://overpass-api.de/api/interpreter'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            timeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            params"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" query\n                            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exceptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RequestException "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" e\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NOTE: this code block can be combined with the subsequent blocks for a continuous example.")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Hint")]),t._v(" "),a("p",[t._v("You may want to experiment with the filtering applied to the OSM query. See the "),a("a",{attrs:{href:"https://wiki.openstreetmap.org/wiki/Overpass_API",target:"_blank",rel:"noopener noreferrer"}},[t._v("OSM Overpass API"),a("OutboundLink")],1),t._v(" for more information.")])]),t._v(" "),a("h2",{attrs:{id:"generating-a-graph"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generating-a-graph"}},[t._v("#")]),t._v(" Generating a graph")]),t._v(" "),a("p",[t._v("Once the data has been downloaded, "),a("code",[t._v("cityseer.util")]),t._v(" can be used to load and subsequently clean the network. The graph should be converted from WGS to UTM coordinates prior to further processing.")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" cityseer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" graphs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" plot\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# load the OSM response data into a networkX graph")]),t._v("\nG_wgs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nX_from_osm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("osm_json"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cast the graph to UTM coordinates prior to processing")]),t._v("\nG_utm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nX_wgs_to_utm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G_wgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nplot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plot_nX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G_utm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" figsize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dpi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("ImageModal",{attrs:{path:e(203),alt:"Raw OSM graph",caption:"The raw OSM graph after conversion to UTM coordinates. © OpenStreetMap contributors."}}),t._v(" "),a("h2",{attrs:{id:"deducing-the-network-topology"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deducing-the-network-topology"}},[t._v("#")]),t._v(" Deducing the network topology")]),t._v(" "),a("p",[t._v("Now that raw OSM data has been loaded into a NetworkX graph, the "),a("code",[t._v("cityseer.util.graph")]),t._v(" methods can be used to further clean and prepare the network prior to analysis.")]),t._v(" "),a("p",[t._v("At this stage, the raw OSM graph is going to look a bit messy. Note how that nodes have been used to represent the roadway geometry. These nodes need to be removed and will be abstracted into "),a("code",[t._v("shapely")]),t._v(" "),a("code",[t._v("LineString")]),t._v(" geometries assigned to the respective street edges. So doing, the geometric representation will be kept distinct from the network topology.")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the raw osm nodes denote the road geometries by the placement of nodes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the first step will generate explicit linestring geometries for each street edge")]),t._v("\nG "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nX_simple_geoms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G_utm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# OSM graphs will often have "stubs", e.g. at entrances to buildings or parking lots')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# these will now be removed, and can be fine-tuned with the despine parameter.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The removed_disconnected flag will removed isolated network components")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# i.e. disconnected portions of network that are not joined to the main street network")]),t._v("\nG "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nX_remove_dangling_nodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" despine"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" remove_disconnected"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# strip the "filler-nodes" from the graph')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the associated geometries will be welded into continuous linestrings")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the new linestrings will be assigned to the newly consolidated topological links")]),t._v("\nG "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nX_remove_filler_nodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nplot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plot_nX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" figsize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dpi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("ImageModal",{attrs:{path:e(204),alt:"OSM graph topology",caption:"The OSM graph after conversion to a topological representation. © OpenStreetMap contributors."}}),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),a("p",[t._v("At this point it may initially appear that the roadway geometries have now gone missing. However, this information is still present in the "),a("code",[t._v("LineString")]),t._v(" geometries assigned to each street edge. Put differently, the plotted representation is now topological, not geometric. During conversion to a "),a("code",[t._v("cityseer")]),t._v(" network map, "),a("code",[t._v("cityseer")]),t._v(" will automatically compute the length and comulative angular change for each of these "),a("code",[t._v("LineString")]),t._v(" geoms. The entry and exit angle of each network edge is also determined and is used internally to compute and aggregate angular change from one street to another.")])]),t._v(" "),a("h2",{attrs:{id:"refining-the-network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#refining-the-network"}},[t._v("#")]),t._v(" Refining the network")]),t._v(" "),a("p",[t._v("The final step involves the consolidation of nodes to clean-up extraneous nodes, which may otherwise exaggerate the intensity or complexity of the network in certain situations.")]),t._v(" "),a("p",[t._v("Two different methods can be used for this purpose:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://cityseer.github.io/cityseer/util/graphs.html#nx-consolidate-spatial",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("X_consolidate_spatial")]),a("OutboundLink")],1),t._v(" consolidates adjacent nodes based on a crow-flies distance threshold;")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://cityseer.github.io/cityseer/util/graphs.html#nx-consolidate-parallel",target:"_blank",rel:"noopener noreferrer"}},[t._v("nX_consolidate_parallel"),a("OutboundLink")],1),t._v(" consolidates adjacent nodes for parallel edges, and tends to give superior results.\nBoth methods take a "),a("code",[t._v("buffer_dist")]),t._v(" parameter specifying the threshold distance at which to apply consolidation, and may involve a degree of experimentation to find suitable distance.")])]),t._v(" "),a("p",[t._v("These methods can optionally be combined with network decomposition, which can be applied before or after, depending on which gives the best results for a given situation.")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# decomposition of the network will even out the intensity of nodes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set the decompose_max flag based on the level of granularity required")]),t._v("\nG "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nX_decompose"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" decompose_max"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# simplify split roadways")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# some experimentation may be required to find the optimal buffer distance")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# setting it too large, will deteriorate the quality of the network")]),t._v("\nG "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nX_consolidate_parallel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer_dist"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nplot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plot_nX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" figsize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dpi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("ImageModal",{attrs:{path:e(205),alt:"OSM graph after decomposition and consolidation",caption:"The OSM graph after decomposition and consolidation. © OpenStreetMap contributors."}}),t._v(" "),a("p",[t._v("There may still be locations that need some manual cleaning, though this is now much easier to accomplish. The graph is now ready for analysis with the "),a("code",[t._v("cityseer")]),t._v(" package's methods.")])],1)}),[],!1,null,null,null);s.default=n.exports}}]);