(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{153:function(t,s,a){t.exports=a.p+"assets/img/graph_dual.84af1117.png"},167:function(t,s,a){t.exports=a.p+"assets/img/graph_decomposed.96e93b11.png"},168:function(t,s,a){t.exports=a.p+"assets/img/assignment.c026032b.png"},169:function(t,s,a){t.exports=a.p+"assets/img/assignment_decomposed.b21615f0.png"},202:function(t,s,a){t.exports=a.p+"assets/img/graph.900293e4.png"},203:function(t,s,a){t.exports=a.p+"assets/img/intro_segment_harmonic.c7760c49.png"},204:function(t,s,a){t.exports=a.p+"assets/img/intro_mixed_uses.5279f446.png"},228:function(t,s,a){"use strict";a.r(s);var e=a(3),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"cityseer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cityseer"}},[t._v("#")]),t._v(" cityseer "),e("Chip",{attrs:{text:"beta"}})],1),t._v(" "),e("p",[e("code",[t._v("cityseer")]),t._v(" is a collection of computational tools for fine-grained network and land-use analysis, useful for assessing the morphological precursors to vibrant neighbourhoods. It is underpinned by rigorous network-based methods that have been developed from the ground-up specifically for hyperlocal analysis at the pedestrian scale.")]),t._v(" "),e("p",[t._v("The use of "),e("code",[t._v("python")]),t._v(" facilitates interaction with popular tools for network, geospatial, and scientific data analysis, i.e. "),e("a",{attrs:{href:"https://networkx.github.io/",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("networkX")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://shapely.readthedocs.io",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("shapely")]),e("OutboundLink")],1),t._v(", and the "),e("a",{attrs:{href:"http://www.numpy.org/",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("numpy")]),e("OutboundLink")],1),t._v(" stack. The underlying algorithms are designed for efficient large-scale urban analysis and have been implemented in "),e("a",{attrs:{href:"https://numba.pydata.org/",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("numba")]),e("OutboundLink")],1),t._v(" JIT compiled code.")]),t._v(" "),e("h2",{attrs:{id:"installation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),e("p",[e("code",[t._v("cityseer")]),t._v(" is a "),e("code",[t._v("python")]),t._v(" package that can be installed with "),e("code",[t._v("pip")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("pip "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" cityseer\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("Code tests are run against "),e("code",[t._v("python 3.8")]),t._v(".")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/cityseer/cityseer/actions",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://github.com/cityseer/cityseer/workflows/publish%20package/badge.svg",alt:"Actions Status"}}),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/cityseer/cityseer/actions",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://github.com/cityseer/cityseer/workflows/publish%20docs/badge.svg",alt:"Actions Status"}}),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"quickstart"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quickstart"}},[t._v("#")]),t._v(" Quickstart")]),t._v(" "),e("p",[e("code",[t._v("cityseer")]),t._v(" revolves around networks (graphs). If you're comfortable with "),e("code",[t._v("numpy")]),t._v(" and abstract data handling, then the underlying data structures can be created and manipulated directly. However, it is generally more convenient to sketch the graph using "),e("a",{attrs:{href:"https://networkx.github.io/",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("NetworkX")]),e("OutboundLink")],1),t._v(" and to let "),e("code",[t._v("cityseer")]),t._v(" take care of initialising and converting the graph for you.")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# any NetworkX graph with 'x' and 'y' node attributes will do")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# here we'll use the cityseer mock module to generate an example networkX graph")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" cityseer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" mock\nG "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mock_graph"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\nimport networkx as nx\nprint(nx.info(G))\n# Name: \n# Type: Graph\n# Number of nodes: 56\n# Number of edges: 77\n# Average degree:   2.7500\n'''")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# let's plot the network")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" cityseer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" plot\nplot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plot_nX"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" labels"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NOTE: this code block combines with the following blocks for a continuous example")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br")])]),e("img",{staticClass:"centre",staticStyle:{"max-height":"500px"},attrs:{src:a(202),alt:"Example graph"}}),t._v(" "),e("p",[t._v("The "),e("RouterLink",{attrs:{to:"/util/graphs.html"}},[e("code",[t._v("util.graphs")])]),t._v(" module contains a collection of convenience functions for the preparation and conversion of "),e("code",[t._v("networkX")]),t._v(" graphs. These functions are designed to work with raw "),e("code",[t._v("shapely")]),t._v(" "),e("a",{attrs:{href:"https://shapely.readthedocs.io/en/latest/manual.html#linestrings",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Linestring")]),e("OutboundLink")],1),t._v(" geometries that have been assigned to the edge (link) "),e("code",[t._v("geom")]),t._v(" attributes. The benefit to this approach is that the geometry of the network is kept distinct from its topology: the topology is consequently free from distortions which would otherwise confound centrality and other metrics.")],1),t._v(" "),e("p",[t._v("There are generally two scenarios when creating a street network graph:")]),t._v(" "),e("ol",[e("li",[t._v("In the ideal case, if you have access to a high-quality street network dataset -- which keeps the topology of the network separate from the geometry of the streets -- then you would construct the network based on the topology while assigning the roadway geometries to the respective edges spanning the nodes. "),e("a",{attrs:{href:"https://www.ordnancesurvey.co.uk/business-and-government/products/os-open-roads.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("OS Open Roads"),e("OutboundLink")],1),t._v(" is a good example of this type of dataset. Assigning the geometries to an edge involves A) casting the geometry to a "),e("a",{attrs:{href:"https://shapely.readthedocs.io",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("shapely")]),e("OutboundLink")],1),t._v(" "),e("code",[t._v("LineString")]),t._v(", and B) assigning this geometry to the respective edge by adding the "),e("code",[t._v("LineString")]),t._v(" geometry as a "),e("code",[t._v("geom")]),t._v(" attribute. i.e. "),e("code",[t._v("G[start_node][end_node]['geom'] = linestring_geom")]),t._v(".")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("In reality, most data-sources are not this refined and will represent roadway geometries by adding additional nodes to the network. For a variety of reasons, this is not ideal and you may want to follow the "),e("a",{attrs:{href:"/guide/cleaning"}},[e("code",[t._v("Graph Cleaning")])]),t._v(" guide; in these cases, the "),e("RouterLink",{attrs:{to:"/util/graphs.html#nx-simple-geoms"}},[e("code",[t._v("graphs.nX_simple_geoms")])]),t._v(" method can be used to generate the street geometries, after which several methods can be applied to remove frivolous nodes. For example, "),e("RouterLink",{attrs:{to:"/util/graphs.html#nx-wgs-to-utm"}},[e("code",[t._v("nX_wgs_to_utm")])]),t._v(" for coordinate conversions; "),e("RouterLink",{attrs:{to:"/util/graphs.html#nx-remove-dangling-nodes"}},[e("code",[t._v("nX_remove_dangling_nodes")])]),t._v(" to remove roadway stubs, "),e("RouterLink",{attrs:{to:"/util/graphs.html#nx-remove-filler-nodes"}},[e("code",[t._v("nX_remove_filler_nodes")])]),t._v(" to strip-out filler nodes, and "),e("RouterLink",{attrs:{to:"/util/graphs.html#nx-consolidate-parallel"}},[e("code",[t._v("nX_consolidate_parallel")])]),t._v(" to further simplify the network.")],1)]),t._v(" "),e("p",[e("img",{staticClass:"left",attrs:{src:a(167),alt:"Example 100m decomposed graph"}}),e("img",{staticClass:"right",attrs:{src:a(153),alt:"Example dual graph"}})]),t._v(" "),e("p",[e("em",[t._v("A "),e("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[e("mjx-math",{staticClass:" MJX-TEX"},[e("mjx-mn",{staticClass:"mjx-n"},[e("mjx-c",{attrs:{c:"1"}}),e("mjx-c",{attrs:{c:"0"}}),e("mjx-c",{attrs:{c:"0"}})],1),e("mjx-mi",{staticClass:"mjx-i"},[e("mjx-c",{attrs:{c:"m"}})],1)],1)],1),t._v(' decomposed variant of the graph (left) and an example primal / dual transformation of the (undecomposed) graph (right). Decomposed or "ghosted" nodes provide granular snapshots at regular intervals along streetfronts.')],1)]),t._v(" "),e("p",[t._v("Once the network is prepared, "),e("RouterLink",{attrs:{to:"/util/graphs.html#nx-decompose"}},[e("code",[t._v("nX_decompose")])]),t._v(" can be used for the purpose of generating granular graph representations; whereas "),e("RouterLink",{attrs:{to:"/util/graphs.html#nx-to-dual"}},[e("code",[t._v("nX_to_dual")])]),t._v(" casts a primal graph representation to its dual.")],1),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" cityseer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" graphs\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# provide your own shapely geometries if you need precise street lengths / angles")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# else, auto-generate simple geometries from the start to end node of each network edge")]),t._v("\nG "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nX_simple_geoms"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# optionally decompose (or cast to dual)")]),t._v("\nG "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nX_decompose"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("The "),e("code",[t._v("networkX")]),t._v(" graph can now be transformed into a "),e("RouterLink",{attrs:{to:"/metrics/networks.html#network-layer"}},[e("code",[t._v("Network_Layer")])]),t._v(" by invoking "),e("RouterLink",{attrs:{to:"/metrics/networks.html#network-layer-from-nx"}},[e("code",[t._v("Network_Layer_From_nX")])]),t._v(". Network layers are used for network centrality computations and also provide the backbone for subsequent landuse and statistical aggregations. They must be initialised with a set of distances "),e("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[e("mjx-math",{staticClass:" MJX-TEX"},[e("mjx-msub",[e("mjx-mi",{staticClass:"mjx-i",attrs:{noIC:"true"}},[e("mjx-c",{attrs:{c:"d"}})],1),e("mjx-script",{staticStyle:{"vertical-align":"-0.15em"}},[e("mjx-TeXAtom",{attrs:{size:"s"}},[e("mjx-mi",{staticClass:"mjx-i"},[e("mjx-c",{attrs:{c:"m"}})],1),e("mjx-mi",{staticClass:"mjx-i"},[e("mjx-c",{attrs:{c:"a"}})],1),e("mjx-mi",{staticClass:"mjx-i"},[e("mjx-c",{attrs:{c:"x"}})],1)],1)],1)],1)],1)],1),t._v(" specifying the maximum network-distance thresholds at which the local centrality methods will terminate.")],1),t._v(" "),e("p",[t._v("The "),e("RouterLink",{attrs:{to:"/metrics/networks.html#compute-centrality"}},[e("code",[t._v("Network_Layer.compute_centrality")])]),t._v(" method wraps underlying numba optimised functions that compute a range of centrality methods. These are performed simultaneously for any required combinations of measures and distances. The results of the computations will be written to the "),e("code",[t._v("Network_Layer")]),t._v(" class, and can be accessed at the "),e("code",[t._v("Network_Layer.metrics")]),t._v(" property. It is also possible to extract the data to a "),e("code",[t._v("python")]),t._v(" dictionary through use of the "),e("RouterLink",{attrs:{to:"/metrics/networks.html#metrics-to-dict"}},[e("code",[t._v("Network_Layer.metrics_to_dict")])]),t._v(" method, or to simply convert the network — data and all — back into a "),e("code",[t._v("networkX")]),t._v(" layer with the "),e("RouterLink",{attrs:{to:"/metrics/networks.html#to-networkx"}},[e("code",[t._v("Network_Layer.to_networkX")])]),t._v(" method.")],1),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" cityseer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("metrics "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" networks\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create a Network layer from the networkX graph")]),t._v("\nN "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" networks"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Network_Layer_From_nX"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" distances"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1600")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the underlying method allows the computation of various centralities simultaneously, e.g.")]),t._v("\nN"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compute_centrality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("measures"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'segment_harmonic'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'segment_betweenness'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("Categorical and numerical data can be assigned to the network as a "),e("RouterLink",{attrs:{to:"/metrics/layers.html#data-layer"}},[e("code",[t._v("Data_Layer")])]),t._v(". A "),e("code",[t._v("Data_Layer")]),t._v(" represents the spatial locations of data points, and is used for the calculation of various mixed-use, land-use accessibility, and statistical measures. These measures are computed directly over the street network and offer distance-weighted variants. This makes them more contextually sensitive than methods based on simple crow-flies aggregation.")],1),t._v(" "),e("p",[t._v("As with Network Layers, the underlying data structures can be created and manipulated directly. However, it is generally simpler to create a python dictionary containing the "),e("code",[t._v("x")]),t._v(" and "),e("code",[t._v("y")]),t._v(" node attributes for each data point, and to then use "),e("RouterLink",{attrs:{to:"/metrics/layers.html#data-layer-from-dict"}},[e("code",[t._v("Data_Layer_From_Dict")])]),t._v(" to instance a "),e("code",[t._v("Data_Layer")]),t._v(" directly. After instantiation, the "),e("code",[t._v("Data_Layer")]),t._v(" is then assigned to the "),e("code",[t._v("Network_Layer")]),t._v(" through use of the "),e("RouterLink",{attrs:{to:"/metrics/layers.html#assign-to-network"}},[e("code",[t._v("Data_Layer.assign_to_network")])]),t._v(" method.")],1),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" cityseer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("metrics "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" layers\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a mock data dictionary representing the 'x', 'y' attributes for data points")]),t._v("\ndata_dict "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mock_data_dict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" random_seed"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# generate a data layer")]),t._v("\nD "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" layers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data_Layer_From_Dict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data_dict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# assign to the prior Network Layer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# max_dist represents the farthest to search for adjacent street edges")]),t._v("\nD"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assign_to_network"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max_dist"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("The data points will be assigned to the two closest network nodes — one in either direction — based on the closest adjacent street edge. This enables a dynamic spatial aggregation method that more accurately describes distances over the network to data points, relative to the direction of approach.")]),t._v(" "),e("p",[e("img",{staticClass:"left",attrs:{src:a(168),alt:"Example assignment of data to a network"}}),e("img",{staticClass:"right",attrs:{src:a(169),alt:"Example assignment on a decomposed network"}})]),t._v(" "),e("p",[e("em",[t._v("Data assigned to the network (left); note that assignment becomes more contextually precise on decomposed graphs (right).")])]),t._v(" "),e("p",[t._v("Once the data has been assigned, the "),e("RouterLink",{attrs:{to:"/metrics/layers.html#compute-aggregated"}},[e("code",[t._v("Data_Layer.compute_aggregated")])]),t._v(" method is used for the calculation of mixed-use, accessibility, and statistical measures. As with the "),e("code",[t._v("Network_Layer.compute_centrality")]),t._v(" method, the measures are all computed simultaneously (and for all distances); however, simpler stand-alone methods are also available, including: "),e("RouterLink",{attrs:{to:"/metrics/layers.html#hill-diversity"}},[e("code",[t._v("Data_Layer.hill_diversity")])]),t._v(", "),e("RouterLink",{attrs:{to:"/metrics/layers.html#hill-branch-wt-diversity"}},[e("code",[t._v("Data_Layer.hill_branch_wt_diversity")])]),t._v(", "),e("RouterLink",{attrs:{to:"/metrics/layers.html#compute-accessibilities"}},[e("code",[t._v("Data_Layer.compute_accessibilities")])]),t._v(", "),e("RouterLink",{attrs:{to:"/metrics/layers.html#compute-stats-single"}},[e("code",[t._v("Data_Layer.compute_stats_single")])]),t._v(", and "),e("RouterLink",{attrs:{to:"/metrics/layers.html#compute-stats-multiple"}},[e("code",[t._v("Data_Layer.compute_stats_multiple")])]),t._v(".")],1),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# landuse labels can be used to generate mixed-use and land-use accessibility measures")]),t._v("\nlanduse_labels "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mock_categorical_data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data_dict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" random_seed"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# example easy-wrapper method for computing mixed-uses")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the hill q paramater controls the emphasis on unique land-uses vs. balanced preponderances thereof")]),t._v("\nD"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hill_branch_wt_diversity"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("landuse_labels"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" qs"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# example easy-wrapper method for computing accessibilities")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the keys correspond to keys present in the landuse data for which accessibilities will be computed")]),t._v("\nD"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compute_accessibilities"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("landuse_labels"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" accessibility_keys"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or compute multiple measures at once, e.g.:")]),t._v("\nD"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compute_aggregated"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("landuse_labels"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     mixed_use_keys"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hill'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'shannon'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     accessibility_keys"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     qs"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# let's generate some numerical data")]),t._v("\nmock_valuations_data "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mock_numerical_data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data_dict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" random_seed"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# compute max, min, mean, mean-weighted, variance, and variance-weighted")]),t._v("\nD"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compute_stats_single"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stats_key"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'valuations'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stats_data_arr"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("mock_valuations_data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br")])]),e("p",[t._v("The data is aggregated and computed over the street network relative to the "),e("code",[t._v("Network_Layer")]),t._v(" (i.e. street) nodes. The mixed-use, accessibility, and statistical aggregations can therefore be compared directly to centrality computations from the same locations, and can be correlated or otherwise compared. The outputs of the calculations are written to the corresponding node indices in the same "),e("code",[t._v("Network_Layer.metrics")]),t._v(" dictionary used for centrality methods, and will be categorised by the respective keys and parameters.")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# access the data arrays at the respective keys, e.g.")]),t._v("\ndistance_idx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# any of the initialised distances")]),t._v("\nq_idx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# q index: any of the invoked q parameters")]),t._v("\nnode_idx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a node idx")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("metrics"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'centrality'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'segment_harmonic'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("distance_idx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("node_idx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# prints: 6.079301182438035")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("metrics"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mixed_uses'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hill'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q_idx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("distance_idx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("node_idx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# prints: 10.0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the data can also be convert back to a NetworkX graph")]),t._v("\nG_metrics "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_networkX"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or extracted to a dictionary:")]),t._v("\nN"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("metrics_to_dict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br")])]),e("p",[t._v("The data can then be passed to data analysis or plotting methods. For example, the "),e("RouterLink",{attrs:{to:"/util/plot.html"}},[e("code",[t._v("util.plot")])]),t._v(" module can be used to plot the segmentised harmonic closeness centrality and mixed uses for the above mock data:")],1),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# plot the gravity index and mixed uses")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" matplotlib "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" colors\n\nsegment_harmonic_vals "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nmixed_uses_vals "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" G_metrics"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    segment_harmonic_vals"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'metrics'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'centrality'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'segment_harmonic'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    mixed_uses_vals"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'metrics'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mixed_uses'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hill_branch_wt'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# custom colourmap")]),t._v("\ncmap "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" colors"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LinearSegmentedColormap"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("from_list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cityseer'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#64c1ff'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#d32f2f'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# normalise the values")]),t._v("\nsegment_harmonic_vals "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" colors"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Normalize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("segment_harmonic_vals"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cast against the colour map")]),t._v("\nsegment_harmonic_cols "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cmap"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("segment_harmonic_vals"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# plot segment_harmonic")]),t._v("\nplot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plot_nX"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G_metrics"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" labels"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" colour"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("segment_harmonic_cols"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# plot distance-weighted hill mixed uses")]),t._v("\nmixed_uses_vals "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" colors"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Normalize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mixed_uses_vals"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmixed_uses_cols "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cmap"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mixed_uses_vals"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nplot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plot_assignment"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" D"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" node_colour"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("mixed_uses_cols"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data_labels"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("landuse_labels"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br")])]),e("p",[e("img",{staticClass:"left",attrs:{src:a(203),alt:"Example gravity index plot"}}),e("img",{staticClass:"right",attrs:{src:a(204),alt:"Example mixed uses plot"}})]),t._v(" "),e("p",[e("em",[e("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[e("mjx-math",{staticClass:" MJX-TEX"},[e("mjx-mn",{staticClass:"mjx-n"},[e("mjx-c",{attrs:{c:"8"}}),e("mjx-c",{attrs:{c:"0"}}),e("mjx-c",{attrs:{c:"0"}})],1),e("mjx-mi",{staticClass:"mjx-i"},[e("mjx-c",{attrs:{c:"m"}})],1)],1)],1),t._v(" segmentised harmonic closeness centrality (left) and "),e("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[e("mjx-math",{staticClass:" MJX-TEX"},[e("mjx-mn",{staticClass:"mjx-n"},[e("mjx-c",{attrs:{c:"4"}}),e("mjx-c",{attrs:{c:"0"}}),e("mjx-c",{attrs:{c:"0"}})],1),e("mjx-mi",{staticClass:"mjx-i"},[e("mjx-c",{attrs:{c:"m"}})],1)],1)],1),t._v(" branch-weighted mixed-uses (right) plots on a "),e("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[e("mjx-math",{staticClass:" MJX-TEX"},[e("mjx-mn",{staticClass:"mjx-n"},[e("mjx-c",{attrs:{c:"2"}}),e("mjx-c",{attrs:{c:"0"}})],1),e("mjx-mi",{staticClass:"mjx-i"},[e("mjx-c",{attrs:{c:"m"}})],1)],1)],1),t._v(" decomposed graph.")],1)]),t._v(" "),e("h2",{attrs:{id:"issues-contributions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#issues-contributions"}},[t._v("#")]),t._v(" Issues & Contributions")]),t._v(" "),e("p",[t._v("Please report issues to the "),e("a",{attrs:{href:"https://github.com/cityseer/cityseer-api/issues",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("issues")]),e("OutboundLink")],1),t._v(" page of the "),e("code",[t._v("cityseer")]),t._v(" "),e("code",[t._v("github")]),t._v(" repo.")]),t._v(" "),e("p",[t._v("Feature requests and contributions are welcome, and will be considered if within the remit of the package.")])])}),[],!1,null,null,null);s.default=n.exports}}]);